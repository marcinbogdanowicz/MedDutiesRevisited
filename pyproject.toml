[tool.poetry]
name = "med-duties-revisited-2024"
version = "0.1.0"
description = "MedDuties project revisited in 12/2024 in order to rewrite the algorithm in python."
authors = ["marcinbogdanowicz <marcin.bogdanowicz@wp.eu>"]
readme = "README.md"
package-mode = false


[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.10.4"
ipython = "^8.32.0"
gunicorn = "^23.0.0"
babel = "^2.17.0"


[tool.poetry.group.linters]
optional = true


[tool.poetry.group.linters.dependencies]
autoflake = "^2.3.1"
autopep8 = "^2.3.1"
black = "^24.10.0"
flake8 = "^7.1.1"
flake8-black = "^0.3.6"
flake8-bugbear = "^24.12.12"
flake8-comprehensions = "^3.16.0"
flake8-pyproject = "^1.2.3"
flake8-return = "^1.2.0"
flake8-tidy-imports = "^4.11.0"
flake8-implicit-str-concat = "^0.5.0"
flake8-simplify = "^0.21.0"
isort = "^5.13.2"


[tool.poetry.group.tools]
optional = true


[tool.poetry.group.tools.dependencies]
coverage = "^7.6.10"
faker = "^33.3.0"



[tool.poetry.group.web.dependencies]
flask = "^3.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.flake8]
ignore = [
    # Do not call getattr(x, 'attr'), instead use normal property access: x.attr
    'B009',
    # Do not call setattr(x, 'attr', val), instead use normal property access: x.attr = val
    'B010',
    # assertRaises(Exception) and pytest.raises(Exception) should be considered evil
    'B017',
    # Abstract base class has methods, but none of them are abstract.
    'B024',
    # indentation is not a multiple of four (comment)
    'E114',
    # unexpected indentation (comment)
    'E116',
    # whitespace before ‘,’, ‘;’, or ‘:’
    'E203',
    # missing whitespace around operator
    'E225',
    # missing whitespace around arithmetic operator
    'E226',
    # missing whitespace around bitwise or shift operator
    'E227',
    # at least two spaces before inline comment
    'E261',
    # block comment should start with ‘# ‘
    'E265',
    # line too long (82 > 79 characters)
    'E501',
    # missing explicit return at the end of function able to return non-None value.
    'R503',
    # unnecessary variable assignment before return statement.
    'R504',
    # unnecessary else after return statement.
    'R505',
    # unnecessary else after raise statement.
    'R506',
    # Use a single if-statement instead of nested if-statements
    'SIM102',
    # Use any(...)
    'SIM110',
    # Combine conditions via a logical or to prevent duplicating code
    'SIM114',
    # Split string directly if only constants are used
    'SIM905',
    # Use dict.get(key)
    'SIM908',
    # line break before binary operator
    'W503',
    # line break after binary operator
    'W504'
]
exclude = [
    '.git',
]
banned-modules = '''
    typing.Optional = Use | None
    typing.List = Use list
    typing.Dict = Use dict
    typing.Set = Use set
    typing.Tuple = Use tuple
    typing.Union = Use |
'''
extend-immutable-calls = ['Depends']
max-complexity = 15
ban-relative-imports = true

[tool.black]
line_length = 120
skip_string_normalization = true


[tool.isort]
profile = 'black'
line_length = 120


[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    ]

